{"version":3,"sources":["simulation/db-mock.js","simulation/delay-mock.js","simulation/worker-instance.js","simulation/checktainer.js","simulation/sqs-mock.js","simulation/orchestrator.js","simulation/index.jsx","simulation/scheduler.js","simulation/platform-mock-new.js","App.js","index.js"],"names":["workflows","tasks","containers","WorkflowModel","data","id","orchestratorId","_status","createdAt","lastUpdatedAt","startedAt","orgSlug","pipelineId","pipelineConfig","protocol","this","idCounter","Date","toISOString","Object","assign","v","n","list","allPending","filter","wf","status","wfGroups","values","_groupBy","exitLoop","find","push","length","TaskModel","workflow","taskScript","taskGroupHash","type","duration","container","tgHash","t","firstPendingTask","ContainerModel","progress","runningTask","reuseCount","memoryInMB","statuses","c","includes","speed","delay","Promise","r","setTimeout","WorkerInstance","dbContainer","emptyPolls","init","a","startDelay","run","task","pollNewTask","progressIterations","i","maxEmptyPolls","stop","dbMock","poll","ecs","windows","Checktainer","running","console","log","grouped","ensureGroup","pendingTasksCount","runningTasksCount","Math","ceil","taskGroupItems","x","listForTaskGroupHash","desiredCreateCount","calcDesiredCreateCount","createCount","queues","enqueuer2Orchestrator","popFromQueue","queueId","limit","messages","pop","Orchestrator","newMode","reserved","runningWorkflows","Set","idlingStartedTimestamp","now","runNew","runOld","size","runningWorkflowsMax","workflowsToExec","sqsMock","add","runWorkflow","getPendingForTheOrchestrator","steps","step","runTask","delete","protocolStep","dbTask","image","join","platform","timeline","Scheduler","maxOrchestrators","noScaleUpCounter","activePipelinesCount","maxCapacity","currentMaxCapacity","orchestrators","pendingAndRunning","maxWorkflowsPerPipeline","getMaxWorkflowsPerPipeline","pipelineWorkflows","firstNotAllocatedWF","sortedOrchestrators","_orderBy","o","allocatedCount","notAllocatedWorkflows","notAllocatedCount","firstWaitingWorkflow","getTime","incNumOfOrchestrators","PlatformMockNew","checktainer","scheduler","map","d","setNumOfOrchestrators","num","max","_remove","idlingDuration","pipelineTasks","pipelineContainers","durations","waiting","_countBy","idlingContainers","times","durationMin","_minBy","durationMax","_maxBy","waitingMin","waitingMax","workflowsByStatus","timelineContainersMode","PipelinesSimulation","timelineRef","useRef","useState","setRunning","stats","setStats","platformState","setPlatformState","setSpeed","numOfOrchestrators","workflowsPerOrchestrator","setWorkflowsPerOrchestrator","workflowsToAdd","setWorkflowsToAdd","startSimulation","stopSimulation","syncWithPlatform","black","getStats","red","blue","state","tasksWithContainers","getStartedTasks","timelineItems","group","title","content","start","end","selectable","style","getContainers","timelineGroups","DataSet","index","setData","groups","items","wfList","getStartedWorkflows","className","reduce","acc","Timeline","current","orientation","axis","item","groupOrder","zoomFriction","preferZoom","stack","groupHeightMode","tooltip","followMouse","horizontalScroll","verticalScroll","zoomKey","addWorkflows","pipelineIds","_times","_random","containerOSIcon","Icon","name","color","disabled","useEffect","syncInterval","setInterval","clearInterval","padding","Button","loading","onClick","Input","label","min","value","onChange","event","s","target","marginLeft","setMaxWorkflowsPerOrchestrator","marginRight","marginTop","Table","TableHeader","TableRow","TableHeaderCell","width","pending","TableBody","TableCell","verticalAlign","margin","Label","Segment","Group","horizontal","compact","Progress","percent","JSON","stringify","Checkbox","toggle","ref","App","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.5163459a.chunk.js","sourcesContent":["import _groupBy from 'lodash/groupBy';\n\nexport const workflows = [];\nexport const tasks = [];\nexport const containers = [];\n\nexport class WorkflowModel {\n  static idCounter = 1;\n\n  static getNForEnqueuer(n) {\n\n    const list = [];\n\n    const allPending = workflows\n      .filter(wf => wf.status === 'pending');\n\n    const wfGroups = Object.values(_groupBy(allPending, 'pipelineId'));\n\n    let exitLoop = false;\n    while (!exitLoop) {\n      exitLoop = true;\n      for (let pipelineWorkflows of wfGroups) {\n        const wf = pipelineWorkflows.find(wf => wf.status === 'pending');\n        if (wf) {\n          wf.status = 'queued';\n          list.push(wf);\n          exitLoop = false;\n        }\n        if (list.length >= n) return list;\n      }\n    }\n    return list;\n  }\n\n  static getPendingForTheOrchestrator(orchestratorId) {\n    return workflows\n      .filter(wf => wf.status === 'pending' && wf.orchestratorId === orchestratorId);\n  }\n\n\n  id = null;\n  orchestratorId = null;\n  _status = 'pending';\n  createdAt = null;\n  lastUpdatedAt = null;\n  startedAt = null;\n  orgSlug = null;\n  pipelineId = null;\n  pipelineConfig = {};\n  protocol = null; // { id: 'someid', steps: [{type: 'ecs', duration: 2000}, ...] }\n  tasks = [];\n\n  constructor(data) {\n    this.id = data.pipelineId + '-' + WorkflowModel.idCounter++;\n    this.createdAt = new Date().toISOString();\n    this.lastUpdatedAt = new Date().toISOString();\n    Object.assign(this, data);\n  }\n\n  set status(v) {\n    this._status = v;\n    this.lastUpdatedAt = new Date().toISOString();\n  }\n\n  get status() {\n    return this._status;\n  }\n}\n\nexport class TaskModel {\n  static idCounter = 1;\n\n  static poll(tgHash) {\n    const [firstPendingTask] = tasks\n      .filter(t => t.taskGroupHash === tgHash && t.status === 'pending');\n    if (firstPendingTask) {\n      firstPendingTask.startedAt = new Date().toISOString();\n      firstPendingTask.status = 'in-progress';\n      return firstPendingTask;\n    }\n    return null;\n  }\n\n  id = null;\n  workflow = null;\n  taskScript = null;\n  taskGroupHash = null;\n  type = 'ecs'; // ecs or windows\n  duration = 5000;\n  _status = 'pending';\n  createdAt = null;\n  startedAt = null;\n  lastUpdatedAt = null;\n  container = null;\n\n  constructor(data) {\n    this.id = TaskModel.idCounter++;\n    this.createdAt = new Date().toISOString();\n    this.lastUpdatedAt = new Date().toISOString();\n    Object.assign(this, data);\n  }\n\n  set status(v) {\n    this._status = v;\n    this.lastUpdatedAt = new Date().toISOString();\n  }\n\n  get status() {\n    return this._status;\n  }\n}\n\nexport class ContainerModel {\n  static idCounter = 1;\n\n  static listForTaskGroupHash(tgHash, statuses) {\n    return containers\n      .filter(c => c.taskGroupHash === tgHash && statuses.includes(c.status));\n  }\n\n  id = null;\n  taskGroupHash = null;\n  pipelineId = null;\n  type = 'ecs'; // ecs or windows\n  duration = 5000;\n  progress = 0;\n  _status = 'creating';\n  createdAt = null;\n  startedAt = null;\n  lastUpdatedAt = null;\n  runningTask = null;\n  reuseCount = 0;\n  memoryInMB = 512;\n\n  constructor(data) {\n    this.id = TaskModel.idCounter++;\n    this.createdAt = new Date().toISOString();\n    this.lastUpdatedAt = new Date().toISOString();\n    Object.assign(this, data);\n  }\n\n  set status(v) {\n    this._status = v;\n    this.lastUpdatedAt = new Date().toISOString();\n  }\n\n  get status() {\n    return this._status;\n  }\n}\n\n","let speed = 1;\n\nexport const setSpeed = s => {\n  speed = s;\n};\n\nexport const delay = t => new Promise(r => setTimeout(r, t / speed));\n","import { delay } from './delay-mock.js';\nimport * as dbMock from './db-mock.js';\n\nexport default class WorkerInstance {\n\n  static startDelay = {\n    ecs: 5000,\n    windows: 30000,\n  };\n\n  static maxEmptyPolls = 100;\n\n  dbContainer = null;\n  type = 'ecs';\n\n  emptyPolls = 0;\n\n  constructor(dbContainer) {\n    this.dbContainer = dbContainer;\n    this.init();\n  }\n\n  async init() {\n    await delay(WorkerInstance.startDelay[this.dbContainer.type]);\n    this.run();\n  }\n\n  async run() {\n    this.dbContainer.startedAt = new Date().toISOString();\n    this.dbContainer.status = 'running';\n    while (this.dbContainer.status === 'running') {\n      const task = this.pollNewTask();\n      if (task) {\n        this.dbContainer.runningTask = task;\n        task.container = this.dbContainer;\n        let progressIterations = task.duration / 1000;\n        for (let i = 0; i < progressIterations; i++) {\n          await delay(1000);\n          task.progress = i / progressIterations;\n        }\n        task.progress = 1;\n        task.status = 'completed';\n        this.dbContainer.runningTask = null;\n        this.emptyPolls = 0;\n        this.dbContainer.reuseCount++;\n      } else {\n        this.emptyPolls++;\n        if (this.emptyPolls > WorkerInstance.maxEmptyPolls) {\n          this.stop();\n        }\n      }\n      await delay(500);\n    }\n  }\n\n  stop() {\n    this.dbContainer.status = 'stopped';\n  }\n\n  pollNewTask() {\n    return dbMock.TaskModel.poll(this.dbContainer.taskGroupHash);\n  }\n\n\n}\n","import _groupBy from 'lodash/groupBy';\nimport * as dbMock from './db-mock.js';\nimport { delay } from './delay-mock.js';\nimport WorkerInstance from './worker-instance.js';\n\n\nexport default class Checktainer {\n\n  running = false;\n\n  async run() {\n    this.running = true;\n    console.log('Checktainer started');\n    while (this.running) {\n      const grouped = _groupBy(\n        dbMock.tasks.filter(t => t.status === 'pending'),\n        'taskGroupHash',\n      );\n      for (const tgHash in grouped) {\n        await this.ensureGroup(tgHash);\n      }\n\n      await delay(1000);\n    }\n    console.log('Checktainer stopped');\n  }\n\n  stop() {\n    this.running = false;\n  }\n\n  calcDesiredCreateCount({ pendingTasksCount, runningTasksCount }) {\n    const CREATION_PENDING_KOEF = 5, CREATION_RUNNING_KOEF = 3;\n    return Math.ceil(\n      pendingTasksCount /\n      (runningTasksCount / CREATION_RUNNING_KOEF + 1) /\n      CREATION_PENDING_KOEF\n    );\n  }\n\n  async ensureGroup(taskGroupHash) {\n\n    const taskGroupItems = dbMock.tasks\n      .filter(t => t.taskGroupHash === taskGroupHash && ['pending', 'in-progress'].includes(t.status));\n\n    // borrow logic from ts-demo-p2\n    const x = dbMock.ContainerModel\n      .listForTaskGroupHash(taskGroupHash, ['creating', 'running'])\n      .length;\n\n    // start a new container\n    const [firstPendingTask] = taskGroupItems.filter(t => t.status === 'pending');\n    const pendingTasksCount = taskGroupItems.filter(t => t.status === 'pending').length;\n    const runningTasksCount = taskGroupItems.filter(t => t.status === 'in-progress').length;\n\n    const desiredCreateCount = this.calcDesiredCreateCount({ pendingTasksCount, runningTasksCount });\n    let desiredCount = desiredCreateCount + runningTasksCount;\n\n    const createCount = desiredCount - x;\n\n    for (let i = 0; i < createCount; i++) {\n      const dbContainer = new dbMock.ContainerModel({\n        taskGroupHash,\n        type: firstPendingTask.type,\n        pipelineId: firstPendingTask.workflow.pipelineId,\n      });\n      dbMock.containers.push(dbContainer);\n      new WorkerInstance(dbContainer);\n    }\n  }\n\n}\n","const queues = {\n  enqueuer2Orchestrator: [],\n};\n\nexport const addToQueue = (queueId, messages) => {\n  queues[queueId].unshift(...messages);\n};\n\nexport const popFromQueue = (queueId, limit = 10) => {\n  const messages = [];\n  while (queues[queueId].length && messages.length < limit) {\n    messages.push(queues[queueId].pop());\n  }\n  return messages;\n};\n\nexport const getQueue = queueId => queues[queueId];\n\nexport const getQueueSize = queueId => queues[queueId].length;\n","import * as sqsMock from './sqs-mock.js';\nimport * as dbMock from './db-mock.js';\nimport { delay } from './delay-mock.js';\n\nexport default class Orchestrator {\n\n  static idCounter = 1;\n  static runningWorkflowsMax = 10;\n  static startDelay = 5000;\n\n  id = null;\n  running = false;\n  newMode = false;\n\n  reserved = false;\n\n  runningWorkflows = new Set([]);\n\n  idlingStartedTimestamp = null;\n\n  constructor(newMode = false, reserved = false) {\n    this.id = Orchestrator.idCounter++;\n    this.newMode = newMode;\n    this.reserved = reserved;\n  }\n\n  async run() {\n    await delay(Orchestrator.startDelay);\n    this.idlingStartedTimestamp = Date.now();\n    if (this.newMode) {\n      return this.runNew();\n    } else {\n      return this.runOld();\n    }\n  }\n\n  async runOld() {\n    this.running = true;\n    console.log(`Orchestrator ${this.id} started`);\n    while (this.running) {\n      if (this.runningWorkflows.size < Orchestrator.runningWorkflowsMax) {\n        const workflowsToExec = sqsMock.popFromQueue('enqueuer2Orchestrator', Orchestrator.runningWorkflowsMax - this.runningWorkflows.size);\n        for (const wf of workflowsToExec) {\n          this.runningWorkflows.add(wf);\n          this.runWorkflow(wf);\n          if (!this.running) break;\n        }\n      }\n      await delay(1000);\n    }\n    console.log(`Orchestrator ${this.id} stopped`);\n  }\n\n  async runNew() {\n    this.running = true;\n    console.log(`Orchestrator ${this.id} started (new mode)`);\n    while (this.running) {\n      const workflowsToExec = dbMock.WorkflowModel.getPendingForTheOrchestrator(this.id);\n      for (const wf of workflowsToExec) {\n        this.idlingStartedTimestamp = null;\n        this.runningWorkflows.add(wf);\n        this.runWorkflow(wf);\n        if (!this.running) break;\n      }\n      await delay(1000);\n    }\n    console.log(`Orchestrator ${this.id} stopped`);\n  }\n\n  stop() {\n    this.running = false;\n  }\n\n  async runWorkflow(wf) {\n    wf.orchestratorId = this.id;\n    wf.status = 'in-progress';\n    wf.startedAt = new Date().toISOString();\n\n    for (const step of wf.protocol.steps) {\n      await this.runTask(wf, step);\n    }\n    wf.status = 'completed';\n    this.runningWorkflows.delete(wf);\n    if (!this.runningWorkflows.size) {\n        this.idlingStartedTimestamp = Date.now();\n    }\n  }\n\n  async runTask(wf, protocolStep) {\n    const dbTask = new dbMock.TaskModel({\n      workflow: wf,\n      image: protocolStep.image,\n      taskGroupHash: [wf.orgSlug, wf.pipelineId, protocolStep.type, protocolStep.taskScript].join('-'),\n      type: protocolStep.type,\n      duration: protocolStep.duration,\n    });\n    dbMock.tasks.push(dbTask);\n    wf.tasks.push(dbTask);\n\n    // monitor task...\n    while (['pending', 'in-progress'].includes(dbTask.status)) {\n      await delay(1000);\n    }\n  }\n\n  get idlingDuration() {\n    return this.idlingStartedTimestamp ? Date.now() - this.idlingStartedTimestamp : 0;\n  }\n\n}\n","import React, { useEffect, useState, useRef } from \"react\";\nimport PlatformMock from \"./platform-mock.js\";\nimport PlatformMockNew from \"./platform-mock-new.js\";\nimport {\n  Button,\n  Table,\n  TableHeader,\n  TableBody,\n  TableHeaderCell,\n  TableRow,\n  TableCell,\n  Label,\n  Icon,\n  Segment,\n  Input,\n  Progress,\n  Checkbox\n} from \"semantic-ui-react\";\nimport * as delayMock from \"./delay-mock.js\";\nimport _times from \"lodash/times.js\";\nimport _random from \"lodash/random.js\";\nimport _orderBy from \"lodash/orderBy.js\";\nimport { Timeline, DataSet } from \"vis-timeline/standalone\";\n\nlet platform,\n  timeline,\n  timelineContainersMode = 0;\n\nconst PipelinesSimulation = () => {\n  const newVersion = true;\n\n  if (!platform) {\n    platform = newVersion ? new PlatformMockNew() : new PlatformMock();\n  }\n\n  const timelineRef = useRef(null);\n  const [running, setRunning] = useState(false);\n  const [stats, setStats] = useState(null);\n  const [platformState, setPlatformState] = useState(null);\n  const [speed, setSpeed] = useState(1);\n  const [numOfOrchestrators, setNumOfOrchestrators] = useState(2);\n  const [workflowsPerOrchestrator, setWorkflowsPerOrchestrator] = useState(10);\n  const [queueSize, setQueueSize] = useState(50);\n  const [workflowsToAdd, setWorkflowsToAdd] = useState(100);\n\n  const startSimulation = async () => {\n    setRunning(true);\n    platform.run();\n  };\n\n  const stopSimulation = async () => {\n    platform.stop();\n    setRunning(false);\n    await syncWithPlatform();\n  };\n\n  const syncWithPlatform = async () => {\n    setStats({\n      black: platform.getStats(\"black\"),\n      red: platform.getStats(\"red\"),\n      blue: platform.getStats(\"blue\")\n    });\n    setPlatformState(platform.state);\n    setNumOfOrchestrators(platform.orchestrators.length);\n\n    if (!timeline) {\n      timeline = new Timeline(timelineRef.current, [], new DataSet([]), {\n        orientation: {\n          axis: \"both\",\n          item: \"top\"\n        },\n        groupOrder: \"index\",\n        zoomFriction: 20,\n        preferZoom: false,\n        stack: false,\n        groupHeightMode: \"fixed\",\n        tooltip: {\n          followMouse: true,\n          delay: 100\n        },\n        horizontalScroll: true,\n        verticalScroll: true,\n        zoomKey: \"ctrlKey\",\n        start: new Date(),\n        end: new Date(Date.now() + 300000)\n      });\n    } else if (platform.running && timelineContainersMode) {\n      const tasksWithContainers = platform.getStartedTasks();\n\n      const timelineItems = tasksWithContainers.map((t) => ({\n        id: t.id,\n        group: t.container.id,\n        title: `task-${t.id}`,\n        content: `task-${t.id}`,\n        start: new Date(t.startedAt),\n        end: t.status !== \"completed\" ? new Date() : new Date(t.lastUpdatedAt),\n        type: \"range\",\n        selectable: false,\n        style: `border-color: black; background-color: ${t.workflow.pipelineId}; opacity: 0.8; color: white;`\n      }));\n\n      const containers = platform.getContainers();\n\n      timelineItems.push(\n        ...containers.map((c) => ({\n          id: `c-${c.id}`,\n          group: c.id,\n          start: new Date(c.createdAt),\n          end: c.status !== \"stopped\" ? new Date() : new Date(c.lastUpdatedAt),\n          type: \"background\",\n          selectable: false,\n          style: `background-color: ${c.pipelineId}; opacity: 0.3;`\n        }))\n      );\n\n      const timelineGroups = new DataSet(\n        containers.map((c, index) => ({\n          id: c.id,\n          index,\n          content: `<small>${c.type === \"ecs\" ? \"ecs\" : \"win\"} ${\n            c.memoryInMB\n          }MB</small>`,\n          style: `color: ${c.pipelineId};`\n        }))\n      );\n\n      timeline.setData({\n        groups: timelineGroups,\n        items: timelineItems\n      });\n    } else {\n      const wfList = _orderBy(platform.getStartedWorkflows(), (wf) =>\n        new Date(wf.startedAt).getTime()\n      );\n\n      const timelineItems = wfList.map((wf) => ({\n        id: wf.id,\n        group: wf.id,\n        title: wf.id,\n        content: wf.id,\n        start: new Date(wf.startedAt),\n        end:\n          wf.status !== \"completed\" ? new Date() : new Date(wf.lastUpdatedAt),\n        type: \"background\",\n        selectable: false,\n        style: `border-color: black; background-color: ${wf.pipelineId}; opacity: 0.8; color: white;`\n      }));\n\n      timelineItems.push(\n        ...wfList.map((wf) => ({\n          id: `${wf.id}-created`,\n          group: wf.id,\n          title: wf.id,\n          start: new Date(wf.createdAt),\n          type: \"point\",\n          selectable: false,\n          className: `timeline-point-${wf.pipelineId}`\n        }))\n      );\n\n      timelineItems.push(\n        ...wfList.reduce((acc, wf) => {\n          acc.push(\n            ...wf.tasks\n              .filter((t) => t.startedAt)\n              .map((t) => ({\n                id: `task-${t.id}`,\n                group: wf.id,\n                title: `${t.id}`,\n                // content: `${t.id}`,\n                start: new Date(t.startedAt),\n                end:\n                  t.status !== \"completed\"\n                    ? new Date()\n                    : new Date(t.lastUpdatedAt),\n                type: \"range\",\n                selectable: false,\n                style: `border-color: white; background: none; color: white;`\n              }))\n          );\n          return acc;\n        }, [])\n      );\n\n      const timelineGroups = new DataSet(\n        wfList.map((wf, index) => ({\n          id: wf.id,\n          index,\n          content: \"\"\n        }))\n      );\n\n      timeline.setData({\n        groups: timelineGroups,\n        items: timelineItems\n      });\n    }\n  };\n\n  const changeSpeed = (event) => {\n    setSpeed(event.target.value);\n    delayMock.setSpeed(1 * event.target.value || 1);\n  };\n\n  const changeNumOfOrchestrators = (event) => {\n    platform.setNumOfOrchestrators(1 * event.target.value || 1);\n    setNumOfOrchestrators(platform.orchestrators.length);\n  };\n\n  const changeWorkflowsPerOrchestrator = (event) => {\n    setWorkflowsPerOrchestrator(event.target.value);\n    platform.setMaxWorkflowsPerOrchestrator(1 * event.target.value || 1);\n  };\n\n  const changeQueueSize = (event) => {\n    setQueueSize(event.target.value);\n    platform.enqueuer.setQueueMaxLength(1 * event.target.value || 1);\n  };\n\n  const changeWorkflowsToAdd = (event) => {\n    setWorkflowsToAdd(event.target.value);\n  };\n\n  const addWorkflows = (pipelineIds) => {\n    const getPipelineIdToSteps = () => ({\n      red: [\n        { type: \"ecs\", duration: 1000 * _random(1, 8), taskScript: \"ts1\" },\n        { type: \"windows\", duration: 5000 * _random(1, 5), taskScript: \"ts2\" }\n      ],\n      blue: [\n        { type: \"ecs\", duration: 1000 * _random(1, 5), taskScript: \"ts4\" }\n      ],\n      black: [\n        { type: \"ecs\", duration: 1000 * _random(100, 200), taskScript: \"ts5\" }\n      ]\n    });\n    platform.addWorkflows(\n      _times(workflowsToAdd, (i) => {\n        const pipelineId = pipelineIds[_random(0, pipelineIds.length - 1)];\n        return {\n          orgSlug: \"st-org\",\n          pipelineId: pipelineId,\n          protocol: {\n            id: \"someid\",\n            steps: getPipelineIdToSteps()[pipelineId]\n          }\n        };\n      })\n    );\n  };\n  const containerOSIcon = (c) => (\n    <>\n      {c.type === \"windows\" && (\n        <Icon\n          name=\"windows\"\n          className=\"pull-right\"\n          color={c.pipelineId}\n          disabled\n        />\n      )}\n      {c.type === \"ecs\" && (\n        <Icon\n          name=\"linux\"\n          className=\"pull-right\"\n          color={c.pipelineId}\n          disabled\n        />\n      )}\n    </>\n  );\n\n  useEffect(() => {\n    const syncInterval = setInterval(syncWithPlatform, 1000);\n    syncWithPlatform();\n    return () => {\n      clearInterval(syncInterval);\n    };\n  }, []);\n\n  return (\n    <div style={{ padding: \"14px 62px\" }}>\n      <style>{`\n       .timeline-point-blue { border-color: blue; }\n       .timeline-point-red { border-color: red; }\n       .timeline-point-black { border-color: black; }\n      `}</style>\n      <h3>New architecture simulation</h3>\n      <div>\n        <Button\n          disabled={running}\n          loading={running}\n          onClick={() => startSimulation()}\n        >\n          RUN\n        </Button>\n        &nbsp;\n        <Button disabled={!running} onClick={() => stopSimulation()}>\n          STOP\n        </Button>\n        <Input\n          type=\"number\"\n          size=\"mini\"\n          label=\"speed\"\n          min=\"1\"\n          max=\"100\"\n          step=\"1\"\n          value={speed}\n          onChange={changeSpeed}\n          style={{ marginLeft: \"30px\" }}\n        />\n        <Input\n          type=\"number\"\n          size=\"mini\"\n          label=\"orchestrators\"\n          min=\"1\"\n          max=\"8\"\n          step=\"1\"\n          value={numOfOrchestrators}\n          onChange={changeNumOfOrchestrators}\n          style={{ marginLeft: \"4px\" }}\n        />\n        <Input\n          type=\"number\"\n          size=\"mini\"\n          label=\"workflows per orchestrator\"\n          min=\"1\"\n          max=\"100\"\n          step=\"1\"\n          value={workflowsPerOrchestrator}\n          onChange={changeWorkflowsPerOrchestrator}\n          style={{ marginLeft: \"4px\" }}\n        />\n        {!newVersion && (\n          <Input\n            type=\"number\"\n            size=\"mini\"\n            label=\"queue size\"\n            min=\"5\"\n            max=\"1000\"\n            step=\"5\"\n            value={queueSize}\n            onChange={changeQueueSize}\n            style={{ marginLeft: \"4px\" }}\n          />\n        )}\n        <Button\n          className=\"pull-right\"\n          style={{ marginLeft: \"14px\" }}\n          onClick={() => addWorkflows([\"blue\", \"red\", \"black\"])}\n        >\n          +mix\n        </Button>\n        <Button\n          className=\"pull-right\"\n          color=\"blue\"\n          onClick={() => addWorkflows([\"blue\"])}\n        >\n          +\n        </Button>\n        <Button\n          className=\"pull-right\"\n          color=\"red\"\n          onClick={() => addWorkflows([\"red\"])}\n        >\n          +\n        </Button>\n        <Button\n          className=\"pull-right\"\n          color=\"black\"\n          onClick={() => addWorkflows([\"black\"])}\n        >\n          +\n        </Button>\n        <Input\n          type=\"number\"\n          label=\"to create\"\n          min=\"1\"\n          max=\"100\"\n          step=\"1\"\n          value={workflowsToAdd}\n          onChange={changeWorkflowsToAdd}\n          className=\"pull-right\"\n          style={{ marginRight: \"8px\" }}\n        />\n      </div>\n      <div style={{ marginTop: \"10px\" }}>\n        {platformState && (\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHeaderCell width=\"1\">\n                  Pending [\n                  {(platformState.workflowsByStatus.pending || []).length}]\n                </TableHeaderCell>\n                {!newVersion && (\n                  <TableHeaderCell width=\"1\">Queue</TableHeaderCell>\n                )}\n                {platformState.orchestrators.map((o, i) => (\n                  <TableHeaderCell width=\"2\" key={o.id}>\n                    Orch #{i + 1} [{o.workflows.length}]\n                  </TableHeaderCell>\n                ))}\n                <TableHeaderCell width=\"2\">\n                  Containers [{platformState.containers.length}]\n                </TableHeaderCell>\n                <TableHeaderCell width=\"2\">Stats</TableHeaderCell>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              <TableRow>\n                <TableCell verticalAlign=\"top\">\n                  {(platformState.workflowsByStatus.pending || []).map((wf) => (\n                    <div key={wf.id} style={{ margin: \"2px\" }}>\n                      <Label size=\"tiny\" color={wf.pipelineId}>\n                        {wf.id}\n                      </Label>\n                    </div>\n                  ))}\n                </TableCell>\n                {!newVersion && (\n                  <TableCell verticalAlign=\"top\">\n                    {(platformState.execQueue || []).map((wf) => (\n                      <div key={wf.id} style={{ margin: \"2px\" }}>\n                        <Label size=\"tiny\" color={wf.pipelineId}>\n                          {wf.id}\n                        </Label>\n                      </div>\n                    ))}\n                  </TableCell>\n                )}\n                {platformState.orchestrators.map((o) => (\n                  <TableCell verticalAlign=\"top\" key={o.id}>\n                    {o.workflows.map((wf) => (\n                      <div key={wf.id}>\n                        <Segment.Group horizontal size=\"tiny\">\n                          {wf.tasks.map((t) => (\n                            <Segment compact color={wf.pipelineId} key={t.id}>\n                              {wf.id}-{t.id}\n                              {t.status === \"pending\" && (\n                                <Icon\n                                  name=\"hourglass\"\n                                  className=\"pull-right\"\n                                  color={wf.pipelineId}\n                                  disabled\n                                />\n                              )}\n                              {t.status === \"in-progress\" && (\n                                <Progress\n                                  percent={t.progress * 100}\n                                  size=\"tiny\"\n                                  style={{ margin: \"4px 0 0\" }}\n                                  color={wf.pipelineId}\n                                ></Progress>\n                              )}\n                            </Segment>\n                          ))}\n                        </Segment.Group>\n                      </div>\n                    ))}\n                  </TableCell>\n                ))}\n                <TableCell verticalAlign=\"top\">\n                  {(platformState.containers || []).map((c) =>\n                    c.status === \"creating\" ? (\n                      <Segment key={c.id} color={c.pipelineId}>\n                        Creating {c.type}...\n                        {containerOSIcon(c)}\n                      </Segment>\n                    ) : c.runningTask ? (\n                      <Segment color={c.pipelineId} key={c.id}>\n                        {c.runningTask.workflow.id}-{c.runningTask.id} [\n                        {c.reuseCount}]{containerOSIcon(c)}\n                        <Progress\n                          percent={c.runningTask.progress * 100}\n                          size=\"tiny\"\n                          style={{ margin: \"4px 0 0\" }}\n                          color={c.pipelineId}\n                        ></Progress>\n                      </Segment>\n                    ) : (\n                      <Segment color={c.pipelineId} key={c.id}>\n                        Idling [{c.reuseCount}]{containerOSIcon(c)}\n                      </Segment>\n                    )\n                  )}\n                </TableCell>\n                <TableCell verticalAlign=\"top\">\n                  {[\"black\", \"red\", \"blue\"].map((pipelineId) => (\n                    <Segment color={pipelineId} key={pipelineId}>\n                      <pre style={{ color: pipelineId }}>\n                        {JSON.stringify(stats[pipelineId], null, 2)}\n                      </pre>\n                    </Segment>\n                  ))}\n                </TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        )}\n      </div>\n      <div style={{ marginTop: \"10px\" }}>\n        <Checkbox\n          toggle\n          label={\n            timelineContainersMode\n              ? \"Containers timeline\"\n              : \"Workflows timeline\"\n          }\n          onChange={() => {\n            timelineContainersMode = 1 - timelineContainersMode;\n            syncWithPlatform();\n          }}\n          value={timelineContainersMode}\n        />\n      </div>\n      <div ref={timelineRef} style={{ marginTop: \"10px\" }} />\n    </div>\n  );\n};\n\nPipelinesSimulation.propTypes = {};\n\nexport default PipelinesSimulation;\n","import _groupBy from 'lodash/groupBy';\nimport _orderBy from 'lodash/orderBy';\nimport { delay } from './delay-mock.js';\nimport * as dbMock from './db-mock.js';\nimport Orchestrator from './orchestrator.js';\n\nexport default class Scheduler {\n\n  running = false;\n\n  maxOrchestrators = 8;\n\n  /**\n   * @type {PlatformMockNew}\n   */\n  platform = null;\n\n  noScaleUpCounter = 0;\n\n  constructor(platform) {\n    this.platform = platform;\n  }\n\n  getMaxWorkflowsPerPipeline(activePipelinesCount = 1, maxCapacity) {\n    return Math.ceil(maxCapacity / activePipelinesCount); // limits?\n  }\n\n  async run() {\n    this.running = true;\n    console.log('Scheduler started');\n\n    while (this.running) {\n\n      const currentMaxCapacity = Orchestrator.runningWorkflowsMax * this.platform.orchestrators.length;\n\n      const pendingAndRunning = dbMock.workflows\n        .filter(wf => ['pending', 'in-progress'].includes(wf.status));\n\n      const wfGroups = Object.values(_groupBy(pendingAndRunning, 'pipelineId'));\n\n      if (wfGroups.length) {\n        const maxWorkflowsPerPipeline = this.getMaxWorkflowsPerPipeline(wfGroups.length, currentMaxCapacity);\n\n        let exitLoop = false;\n        while (!exitLoop) {\n          exitLoop = true;\n          for (const pipelineWorkflows of wfGroups) {\n            const allocatedForPipelineCount = pipelineWorkflows.filter(wf => wf.orchestratorId).length;\n            if (allocatedForPipelineCount < maxWorkflowsPerPipeline) {\n              const firstNotAllocatedWF = pipelineWorkflows.find(wf => !wf.orchestratorId);\n              if (!firstNotAllocatedWF) continue;\n              const sortedOrchestrators = _orderBy(\n                this.platform.orchestrators,\n                o => dbMock.workflows\n                  .filter(wf => ['pending', 'in-progress'].includes(wf.status) && wf.orchestratorId === o.id).length,\n              );\n              for (const o of sortedOrchestrators) {\n                const allocatedCount = dbMock.workflows\n                  .filter(wf => ['pending', 'in-progress'].includes(wf.status) && wf.orchestratorId === o.id).length;\n                if (allocatedCount < Orchestrator.runningWorkflowsMax) {\n                  firstNotAllocatedWF.orchestratorId = o.id;\n                  exitLoop = false;\n                  break;\n                }\n              }\n            }\n          }\n        }\n\n      }\n\n      const allocatedCount = dbMock.workflows\n        .filter(wf => ['pending', 'in-progress'].includes(wf.status) && wf.orchestratorId).length;\n      const notAllocatedWorkflows = dbMock.workflows.filter(wf => !wf.orchestratorId);\n      const notAllocatedCount = notAllocatedWorkflows.length;\n\n      // TODO: rethink scaling...\n      if (notAllocatedCount > 0 &&\n        (allocatedCount + notAllocatedCount) > currentMaxCapacity &&\n        allocatedCount > 0.8 * currentMaxCapacity) {\n\n        const [firstWaitingWorkflow] = notAllocatedWorkflows;\n        const ageOfFirstWaitingWorkflow = Date.now() - new Date(firstWaitingWorkflow.createdAt).getTime();\n        if (ageOfFirstWaitingWorkflow > 30000 && this.platform.orchestrators.length < this.maxOrchestrators && this.noScaleUpCounter === 0) {\n          this.platform.incNumOfOrchestrators();\n          this.noScaleUpCounter = 10;\n        }\n\n      }\n\n      if (this.noScaleUpCounter > 0) this.noScaleUpCounter--;\n\n      await delay(1000);\n    }\n    console.log('Scheduler stopped');\n  }\n\n  stop() {\n    this.running = false;\n  }\n\n\n}\n","import _mapValues from 'lodash/mapValues';\nimport _remove from 'lodash/remove';\nimport _minBy from 'lodash/minBy';\nimport _maxBy from 'lodash/maxBy';\nimport _countBy from 'lodash/countBy';\nimport _groupBy from 'lodash/groupBy';\nimport Checktainer from './checktainer.js';\nimport Orchestrator from './orchestrator.js';\nimport * as dbMock from './db-mock.js';\nimport Scheduler from './scheduler.js';\nimport { delay } from './delay-mock.js';\n\nexport default class PlatformMockNew {\n\n  running = false;\n\n  orchestrators = [new Orchestrator(true, true), new Orchestrator(true, true)];\n\n  checktainer = new Checktainer();\n  /**\n   * @type {Scheduler}\n   */\n  scheduler = null;\n\n  constructor() {\n    this.scheduler = new Scheduler(this);\n  }\n\n  addWorkflows(list) {\n    dbMock.workflows.push(\n      ...list.map(d => new dbMock.WorkflowModel(d))\n    );\n  }\n\n  incNumOfOrchestrators() {\n    this.setNumOfOrchestrators(this.orchestrators.length + 1);\n  }\n\n  setNumOfOrchestrators(num) {\n    if (this.orchestrators.length < num) {\n      for (let i = this.orchestrators.length; i < num; i++) {\n        const o = new Orchestrator(true);\n        this.orchestrators.push(o);\n        if (this.running) {\n          o.run();\n        }\n      }\n    } else {\n      for (let i = this.orchestrators.length; i > num; i--) {\n        this.orchestrators.pop().stop();\n      }\n    }\n  }\n\n  setMaxWorkflowsPerOrchestrator(max) {\n    Orchestrator.runningWorkflowsMax = max;\n  }\n\n  async run() {\n    for (const orchestrator of this.orchestrators) {\n      orchestrator.run();\n    }\n    this.checktainer.run();\n    this.scheduler.run();\n\n    this.running = true;\n    console.log('Platform started');\n\n    while (this.running) {\n      _remove(this.orchestrators, o => {\n        if (!o.reserved && o.idlingDuration > 20000 && !o.runningWorkflows.size) {\n          o.stop();\n          return true;\n        }\n        return false;\n      });\n      await delay(1000);\n    }\n\n    for (const o of this.orchestrators) {\n      o.stop();\n    }\n    this.checktainer.stop();\n    this.scheduler.stop();\n\n    console.log('Platform stopped');\n  }\n\n  stop() {\n    this.running = false;\n  }\n\n  getStats(pipelineId) {\n\n    const pipelineWorkflows = dbMock.workflows.filter(wf => wf.pipelineId === pipelineId);\n    const pipelineTasks = dbMock.tasks.filter(t => t.workflow.pipelineId === pipelineId);\n    const pipelineContainers = dbMock.containers.filter(c => c.pipelineId === pipelineId);\n\n    const durations = pipelineWorkflows\n      .filter(wf => wf.status === 'completed')\n      .map(wf => ({\n        duration: new Date(wf.lastUpdatedAt).getTime() - new Date(wf.startedAt).getTime(),\n        waiting: new Date(wf.startedAt).getTime() - new Date(wf.createdAt).getTime(),\n      }));\n\n    return {\n      workflows: _countBy(pipelineWorkflows, 'status'),\n      tasks: _countBy(pipelineTasks, 'status'),\n      containers: _countBy(pipelineContainers, 'status'),\n      idlingContainers: pipelineContainers.filter(c => c.status === 'running' && !c.runningTask).length,\n      times: durations.length ? {\n        durationMin: _minBy(durations, 'duration').duration / 1000,\n        durationMax: _maxBy(durations, 'duration').duration / 1000,\n        waitingMin: _minBy(durations, 'waiting').waiting / 1000,\n        waitingMax: _maxBy(durations, 'waiting').waiting / 1000,\n      } : {},\n    };\n  }\n\n  get state() {\n    return {\n      workflowsByStatus: _groupBy(dbMock.workflows, 'status'),\n      orchestrators: this.orchestrators.map(o => ({\n        id: o.id,\n        workflows: dbMock.workflows\n          .filter(wf => wf.orchestratorId === o.id && ['pending', 'queued', 'in-progress'].includes(wf.status)),\n      })),\n      containers: dbMock.containers\n        .filter(c => ['creating', 'running'].includes(c.status)),\n    };\n  }\n\n  getStartedWorkflows() {\n    return dbMock.workflows.filter(wf => wf.startedAt);\n  }\n\n  getStartedTasks() {\n    return dbMock.tasks.filter(t => t.startedAt && t.container);\n  }\n\n  getContainers() {\n    return dbMock.containers;\n  }\n\n}\n","import \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"./styles.css\";\nimport PipelinesSimulation from \"./simulation\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <PipelinesSimulation />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}