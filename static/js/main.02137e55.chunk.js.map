{"version":3,"sources":["App.js","simulation/db-mock.js","simulation/delay-mock.js","simulation/worker-instance.js","simulation/checktainer.js","simulation/sqs-mock.js","simulation/orchestrator.js","simulation/index.jsx","simulation/enqueuer.js","simulation/platform-mock.js","simulation/scheduler.js","simulation/platform-mock-new.js","index.js"],"names":["App","className","workflows","tasks","containers","WorkflowModel","data","id","orchestratorId","_status","createdAt","lastUpdatedAt","startedAt","orgSlug","pipelineId","pipelineConfig","protocol","this","idCounter","Date","toISOString","Object","assign","v","n","list","allPending","filter","wf","status","wfGroups","values","_groupBy","exitLoop","find","push","length","TaskModel","workflow","taskScript","taskGroupHash","type","duration","container","tgHash","t","firstPendingTask","ContainerModel","progress","runningTask","reuseCount","memoryInMB","statuses","c","includes","speed","delay","Promise","r","setTimeout","WorkerInstance","dbContainer","emptyPolls","init","startDelay","run","task","pollNewTask","progressIterations","i","maxEmptyPolls","stop","dbMock","poll","ecs","windows","Checktainer","running","console","log","grouped","ensureGroup","p","pendingTasksCount","numOfNonStoppedContainers","numOfRunningContainers","initNumOfWorkersToCreate","runningTasksCount","numOfWorkersToInc","taskGroupItems","listForTaskGroupHash","desiredCreateCount","calcDesiredCreateCount","createCount","queues","enqueuer2Orchestrator","addToQueue","queueId","messages","unshift","popFromQueue","limit","pop","getQueue","Orchestrator","newMode","reserved","runningWorkflows","Set","idlingStartedTimestamp","now","runNew","runOld","size","runningWorkflowsMax","workflowsToExec","sqsMock","add","runWorkflow","getPendingForTheOrchestrator","steps","step","runTask","delete","protocolStep","dbTask","image","join","platform","timeline","Enqueuer","execQueueMaxLength","messagesToPush","getNForEnqueuer","reverse","max","PlatformMock","orchestrators","checktainer","enqueuer","map","d","num","o","pipelineWorkflows","pipelineTasks","pipelineContainers","durations","getTime","waiting","_countBy","idlingContainers","inQueue","times","durationMin","_minBy","durationMax","_maxBy","waitingMin","waitingMax","workflowsByStatus","execQueue","Scheduler","maxOrchestrators","noScaleUpCounter","activePipelinesCount","maxCapacity","Math","ceil","currentMaxCapacity","pendingAndRunning","maxWorkflowsPerPipeline","getMaxWorkflowsPerPipeline","firstNotAllocatedWF","sortedOrchestrators","_orderBy","allocatedCount","notAllocatedWorkflows","notAllocatedCount","firstWaitingWorkflow","PlatformMockNew","scheduler","setNumOfOrchestrators","_remove","idlingDuration","timelineContainersMode","PipelinesSimulation","newVersion","qs","location","search","old","timelineRef","useRef","useState","setRunning","stats","setStats","platformState","setPlatformState","setSpeed","numOfOrchestrators","workflowsPerOrchestrator","setWorkflowsPerOrchestrator","queueSize","setQueueSize","workflowsToAdd","setWorkflowsToAdd","startSimulation","stopSimulation","syncWithPlatform","black","getStats","red","blue","state","tasksWithContainers","getStartedTasks","timelineItems","group","title","content","start","end","selectable","style","getContainers","timelineGroups","DataSet","index","setData","groups","items","wfList","getStartedWorkflows","reduce","acc","Timeline","current","orientation","axis","item","groupOrder","zoomFriction","preferZoom","stack","groupHeightMode","tooltip","followMouse","horizontalScroll","verticalScroll","zoomKey","addWorkflows","pipelineIds","_times","_random","containerOSIcon","Icon","name","color","disabled","useEffect","syncInterval","setInterval","clearInterval","destroy","padding","href","target","Button","loading","onClick","Input","label","min","value","onChange","event","s","marginLeft","setMaxWorkflowsPerOrchestrator","setQueueMaxLength","marginRight","marginTop","Table","TableHeader","TableRow","TableHeaderCell","width","pending","TableBody","TableCell","verticalAlign","margin","Label","Segment","Group","horizontal","compact","Progress","percent","JSON","stringify","Checkbox","toggle","ref","rootElement","document","getElementById","createRoot","render","path","element"],"mappings":"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","file":"static/js/main.02137e55.chunk.js","sourcesContent":["import { Outlet } from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Outlet />\n    </div>\n  );\n}\n","import _groupBy from \"lodash/groupBy\";\n\nexport const workflows = [];\nexport const tasks = [];\nexport const containers = [];\n\nexport class WorkflowModel {\n  static idCounter = 1;\n\n  static getNForEnqueuer(n) {\n    const list = [];\n\n    const allPending = workflows.filter((wf) => wf.status === \"pending\");\n\n    const wfGroups = Object.values(_groupBy(allPending, \"pipelineId\"));\n\n    let exitLoop = false;\n    while (!exitLoop) {\n      exitLoop = true;\n      for (let pipelineWorkflows of wfGroups) {\n        const wf = pipelineWorkflows.find((wf) => wf.status === \"pending\");\n        if (wf) {\n          wf.status = \"queued\";\n          list.push(wf);\n          exitLoop = false;\n        }\n        if (list.length >= n) return list;\n      }\n    }\n    return list;\n  }\n\n  static getPendingForTheOrchestrator(orchestratorId) {\n    return workflows.filter(\n      (wf) => wf.status === \"pending\" && wf.orchestratorId === orchestratorId\n    );\n  }\n\n  id = null;\n  orchestratorId = null;\n  _status = \"pending\";\n  createdAt = null;\n  lastUpdatedAt = null;\n  startedAt = null;\n  orgSlug = null;\n  pipelineId = null;\n  pipelineConfig = {};\n  protocol = null; // { id: 'someid', steps: [{type: 'ecs', duration: 2000}, ...] }\n  tasks = [];\n\n  constructor(data) {\n    this.id = data.pipelineId + \"-\" + WorkflowModel.idCounter++;\n    this.createdAt = new Date().toISOString();\n    this.lastUpdatedAt = new Date().toISOString();\n    Object.assign(this, data);\n  }\n\n  set status(v) {\n    this._status = v;\n    this.lastUpdatedAt = new Date().toISOString();\n  }\n\n  get status() {\n    return this._status;\n  }\n}\n\nexport class TaskModel {\n  static idCounter = 1;\n\n  static poll(tgHash) {\n    const [firstPendingTask] = tasks.filter(\n      (t) => t.taskGroupHash === tgHash && t.status === \"pending\"\n    );\n    if (firstPendingTask) {\n      firstPendingTask.startedAt = new Date().toISOString();\n      firstPendingTask.status = \"in-progress\";\n      return firstPendingTask;\n    }\n    return null;\n  }\n\n  id = null;\n  workflow = null;\n  taskScript = null;\n  taskGroupHash = null;\n  type = \"ecs\"; // ecs or windows\n  duration = 5000;\n  _status = \"pending\";\n  createdAt = null;\n  startedAt = null;\n  lastUpdatedAt = null;\n  container = null;\n\n  constructor(data) {\n    this.id = TaskModel.idCounter++;\n    this.createdAt = new Date().toISOString();\n    this.lastUpdatedAt = new Date().toISOString();\n    Object.assign(this, data);\n  }\n\n  set status(v) {\n    this._status = v;\n    this.lastUpdatedAt = new Date().toISOString();\n  }\n\n  get status() {\n    return this._status;\n  }\n}\n\nexport class ContainerModel {\n  static idCounter = 1;\n\n  static listForTaskGroupHash(tgHash, statuses) {\n    return containers.filter(\n      (c) => c.taskGroupHash === tgHash && statuses.includes(c.status)\n    );\n  }\n\n  id = null;\n  taskGroupHash = null;\n  pipelineId = null;\n  type = \"ecs\"; // ecs or windows\n  duration = 5000;\n  progress = 0;\n  _status = \"creating\";\n  createdAt = null;\n  startedAt = null;\n  lastUpdatedAt = null;\n  runningTask = null;\n  reuseCount = 0;\n  memoryInMB = 512;\n\n  constructor(data) {\n    this.id = TaskModel.idCounter++;\n    this.createdAt = new Date().toISOString();\n    this.lastUpdatedAt = new Date().toISOString();\n    Object.assign(this, data);\n  }\n\n  set status(v) {\n    this._status = v;\n    this.lastUpdatedAt = new Date().toISOString();\n  }\n\n  get status() {\n    return this._status;\n  }\n}\n","let speed = 1;\n\nexport const setSpeed = s => {\n  speed = s;\n};\n\nexport const delay = t => new Promise(r => setTimeout(r, t / speed));\n","import { delay } from \"./delay-mock.js\";\nimport * as dbMock from \"./db-mock.js\";\n\nexport default class WorkerInstance {\n  static startDelay = {\n    ecs: 5000,\n    windows: 30000\n  };\n\n  static maxEmptyPolls = 100;\n\n  dbContainer = null;\n  type = \"ecs\";\n\n  emptyPolls = 0;\n\n  constructor(dbContainer) {\n    this.dbContainer = dbContainer;\n    this.init();\n  }\n\n  async init() {\n    await delay(WorkerInstance.startDelay[this.dbContainer.type]);\n    this.run();\n  }\n\n  async run() {\n    this.dbContainer.startedAt = new Date().toISOString();\n    this.dbContainer.status = \"running\";\n    while (this.dbContainer.status === \"running\") {\n      const task = this.pollNewTask();\n      if (task) {\n        this.dbContainer.runningTask = task;\n        task.container = this.dbContainer;\n        let progressIterations = task.duration / 1000;\n        for (let i = 0; i < progressIterations; i++) {\n          await delay(1000);\n          task.progress = i / progressIterations;\n        }\n        task.progress = 1;\n        task.status = \"completed\";\n        this.dbContainer.runningTask = null;\n        this.emptyPolls = 0;\n        this.dbContainer.reuseCount++;\n      } else {\n        this.emptyPolls++;\n        if (this.emptyPolls > WorkerInstance.maxEmptyPolls) {\n          this.stop();\n        }\n      }\n      await delay(500);\n    }\n  }\n\n  stop() {\n    this.dbContainer.status = \"stopped\";\n  }\n\n  pollNewTask() {\n    return dbMock.TaskModel.poll(this.dbContainer.taskGroupHash);\n  }\n}\n","import _groupBy from \"lodash/groupBy\";\nimport * as dbMock from \"./db-mock.js\";\nimport { delay } from \"./delay-mock.js\";\nimport WorkerInstance from \"./worker-instance.js\";\n\nexport default class Checktainer {\n  running = false;\n\n  async run() {\n    this.running = true;\n    console.log(\"Checktainer started\");\n    while (this.running) {\n      const grouped = _groupBy(\n        dbMock.tasks.filter((t) => t.status === \"pending\"),\n        \"taskGroupHash\"\n      );\n      for (const tgHash in grouped) {\n        await this.ensureGroup(tgHash);\n      }\n\n      await delay(1000);\n    }\n    console.log(\"Checktainer stopped\");\n  }\n\n  stop() {\n    this.running = false;\n  }\n\n  calcDesiredCreateCount(p) {\n    if (p.pendingTasksCount < 1) {\n      return 0;\n    }\n\n    // wait until there are no containers in creation state\n    if (p.numOfNonStoppedContainers > p.numOfRunningContainers) {\n      return 0;\n    }\n\n    // initial creation\n    if (p.numOfNonStoppedContainers === 0 && p.pendingTasksCount > 0) {\n      return p.initNumOfWorkersToCreate;\n    }\n\n    // we have more running containers than running tasks, low utilization?\n    if (p.numOfRunningContainers > p.runningTasksCount) {\n      return 0;\n    }\n\n    // all containers are busy... give me more!\n    return p.numOfWorkersToInc;\n  }\n\n  async ensureGroup(taskGroupHash) {\n    const taskGroupItems = dbMock.tasks.filter(\n      (t) =>\n        t.taskGroupHash === taskGroupHash &&\n        [\"pending\", \"in-progress\"].includes(t.status)\n    );\n\n    // borrow logic from ts-demo-p2\n    const containers = dbMock.ContainerModel.listForTaskGroupHash(\n      taskGroupHash,\n      [\"creating\", \"running\"]\n    );\n\n    // start a new container\n    const [firstPendingTask] = taskGroupItems.filter(\n      (t) => t.status === \"pending\"\n    );\n    const pendingTasksCount = taskGroupItems.filter(\n      (t) => t.status === \"pending\"\n    ).length;\n    const runningTasksCount = taskGroupItems.filter(\n      (t) => t.status === \"in-progress\"\n    ).length;\n\n    const numOfNonStoppedContainers = containers.length;\n    const numOfRunningContainers = containers.filter(\n      (c) => c.status === \"running\"\n    ).length;\n\n    const desiredCreateCount = this.calcDesiredCreateCount({\n      pendingTasksCount,\n      runningTasksCount,\n      numOfRunningContainers,\n      numOfNonStoppedContainers,\n      initNumOfWorkersToCreate: 1,\n      numOfWorkersToInc: 1\n    });\n    let desiredCount = desiredCreateCount + runningTasksCount;\n\n    const createCount = desiredCount - numOfNonStoppedContainers;\n\n    for (let i = 0; i < createCount; i++) {\n      const dbContainer = new dbMock.ContainerModel({\n        taskGroupHash,\n        type: firstPendingTask.type,\n        pipelineId: firstPendingTask.workflow.pipelineId\n      });\n      dbMock.containers.push(dbContainer);\n      new WorkerInstance(dbContainer);\n    }\n  }\n}\n","const queues = {\n  enqueuer2Orchestrator: []\n};\n\nexport const addToQueue = (queueId, messages) => {\n  queues[queueId].unshift(...messages);\n};\n\nexport const popFromQueue = (queueId, limit = 10) => {\n  const messages = [];\n  while (queues[queueId].length && messages.length < limit) {\n    messages.push(queues[queueId].pop());\n  }\n  return messages;\n};\n\nexport const getQueue = (queueId) => queues[queueId];\n\nexport const getQueueSize = (queueId) => queues[queueId].length;\n","import * as sqsMock from \"./sqs-mock.js\";\nimport * as dbMock from \"./db-mock.js\";\nimport { delay } from \"./delay-mock.js\";\n\nexport default class Orchestrator {\n  static idCounter = 1;\n  static runningWorkflowsMax = 10;\n  static startDelay = 5000;\n\n  id = null;\n  running = false;\n  newMode = false;\n\n  reserved = false;\n\n  runningWorkflows = new Set([]);\n\n  idlingStartedTimestamp = null;\n\n  constructor(newMode = false, reserved = false) {\n    this.id = Orchestrator.idCounter++;\n    this.newMode = newMode;\n    this.reserved = reserved;\n  }\n\n  async run() {\n    await delay(Orchestrator.startDelay);\n    this.idlingStartedTimestamp = Date.now();\n    if (this.newMode) {\n      return this.runNew();\n    } else {\n      return this.runOld();\n    }\n  }\n\n  async runOld() {\n    this.running = true;\n    console.log(`Orchestrator ${this.id} started`);\n    while (this.running) {\n      if (this.runningWorkflows.size < Orchestrator.runningWorkflowsMax) {\n        const workflowsToExec = sqsMock.popFromQueue(\n          \"enqueuer2Orchestrator\",\n          Orchestrator.runningWorkflowsMax - this.runningWorkflows.size\n        );\n        for (const wf of workflowsToExec) {\n          this.runningWorkflows.add(wf);\n          this.runWorkflow(wf);\n          if (!this.running) break;\n        }\n      }\n      await delay(1000);\n    }\n    console.log(`Orchestrator ${this.id} stopped`);\n  }\n\n  async runNew() {\n    this.running = true;\n    console.log(`Orchestrator ${this.id} started (new mode)`);\n    while (this.running) {\n      const workflowsToExec = dbMock.WorkflowModel.getPendingForTheOrchestrator(\n        this.id\n      );\n      for (const wf of workflowsToExec) {\n        this.idlingStartedTimestamp = null;\n        this.runningWorkflows.add(wf);\n        this.runWorkflow(wf);\n        if (!this.running) break;\n      }\n      await delay(1000);\n    }\n    console.log(`Orchestrator ${this.id} stopped`);\n  }\n\n  stop() {\n    this.running = false;\n  }\n\n  async runWorkflow(wf) {\n    wf.orchestratorId = this.id;\n    wf.status = \"in-progress\";\n    wf.startedAt = new Date().toISOString();\n\n    for (const step of wf.protocol.steps) {\n      await this.runTask(wf, step);\n    }\n    wf.status = \"completed\";\n    this.runningWorkflows.delete(wf);\n    if (!this.runningWorkflows.size) {\n      this.idlingStartedTimestamp = Date.now();\n    }\n  }\n\n  async runTask(wf, protocolStep) {\n    const dbTask = new dbMock.TaskModel({\n      workflow: wf,\n      image: protocolStep.image,\n      taskGroupHash: [\n        wf.orgSlug,\n        wf.pipelineId,\n        protocolStep.type,\n        protocolStep.taskScript\n      ].join(\"-\"),\n      type: protocolStep.type,\n      duration: protocolStep.duration\n    });\n    dbMock.tasks.push(dbTask);\n    wf.tasks.push(dbTask);\n\n    // monitor task...\n    while ([\"pending\", \"in-progress\"].includes(dbTask.status)) {\n      await delay(1000);\n    }\n  }\n\n  get idlingDuration() {\n    return this.idlingStartedTimestamp\n      ? Date.now() - this.idlingStartedTimestamp\n      : 0;\n  }\n}\n","import React, { useEffect, useState, useRef } from \"react\";\nimport PlatformMock from \"./platform-mock.js\";\nimport * as qs from \"query-string\";\nimport PlatformMockNew from \"./platform-mock-new.js\";\nimport {\n  Button,\n  Table,\n  TableHeader,\n  TableBody,\n  TableHeaderCell,\n  TableRow,\n  TableCell,\n  Label,\n  Icon,\n  Segment,\n  Input,\n  Progress,\n  Checkbox\n} from \"semantic-ui-react\";\nimport * as delayMock from \"./delay-mock.js\";\nimport _times from \"lodash/times.js\";\nimport _random from \"lodash/random.js\";\nimport _orderBy from \"lodash/orderBy.js\";\nimport { Timeline, DataSet } from \"vis-timeline/standalone\";\n\nlet platform,\n  timeline,\n  timelineContainersMode = 0;\n\nconst PipelinesSimulation = () => {\n  const { old: oldVersion } = qs.parse(location.search);\n  const newVersion = !oldVersion;\n\n  if (!platform) {\n    platform = newVersion ? new PlatformMockNew() : new PlatformMock();\n  }\n\n  const timelineRef = useRef(null);\n  const [running, setRunning] = useState(false);\n  const [stats, setStats] = useState(null);\n  const [platformState, setPlatformState] = useState(null);\n  const [speed, setSpeed] = useState(1);\n  const [numOfOrchestrators, setNumOfOrchestrators] = useState(2);\n  const [workflowsPerOrchestrator, setWorkflowsPerOrchestrator] = useState(10);\n  const [queueSize, setQueueSize] = useState(50);\n  const [workflowsToAdd, setWorkflowsToAdd] = useState(100);\n\n  const startSimulation = async () => {\n    setRunning(true);\n    platform.run();\n  };\n\n  const stopSimulation = async () => {\n    platform.stop();\n    setRunning(false);\n    await syncWithPlatform();\n  };\n\n  const syncWithPlatform = async () => {\n    setStats({\n      black: platform.getStats(\"black\"),\n      red: platform.getStats(\"red\"),\n      blue: platform.getStats(\"blue\")\n    });\n    setPlatformState(platform.state);\n    setNumOfOrchestrators(platform.orchestrators.length);\n\n    if (!timeline) {\n      timeline = new Timeline(timelineRef.current, [], new DataSet([]), {\n        orientation: {\n          axis: \"both\",\n          item: \"top\"\n        },\n        groupOrder: \"index\",\n        zoomFriction: 20,\n        preferZoom: false,\n        stack: false,\n        groupHeightMode: \"fixed\",\n        tooltip: {\n          followMouse: true,\n          delay: 100\n        },\n        horizontalScroll: true,\n        verticalScroll: true,\n        zoomKey: \"ctrlKey\",\n        start: new Date(),\n        end: new Date(Date.now() + 300000)\n      });\n    } else if (platform.running && timelineContainersMode) {\n      const tasksWithContainers = platform.getStartedTasks();\n\n      const timelineItems = tasksWithContainers.map((t) => ({\n        id: t.id,\n        group: t.container.id,\n        title: `task-${t.id}`,\n        content: `task-${t.id}`,\n        start: new Date(t.startedAt),\n        end: t.status !== \"completed\" ? new Date() : new Date(t.lastUpdatedAt),\n        type: \"range\",\n        selectable: false,\n        style: `border-color: black; background-color: ${t.workflow.pipelineId}; opacity: 0.8; color: white;`\n      }));\n\n      const containers = platform.getContainers();\n\n      timelineItems.push(\n        ...containers.map((c) => ({\n          id: `c-${c.id}`,\n          group: c.id,\n          start: new Date(c.createdAt),\n          end: c.status !== \"stopped\" ? new Date() : new Date(c.lastUpdatedAt),\n          type: \"background\",\n          selectable: false,\n          style: `background-color: ${c.pipelineId}; opacity: 0.3;`\n        }))\n      );\n\n      const timelineGroups = new DataSet(\n        containers.map((c, index) => ({\n          id: c.id,\n          index,\n          content: `<small>${c.type === \"ecs\" ? \"ecs\" : \"win\"} ${\n            c.memoryInMB\n          }MB</small>`,\n          style: `color: ${c.pipelineId};`\n        }))\n      );\n\n      timeline.setData({\n        groups: timelineGroups,\n        items: timelineItems\n      });\n    } else {\n      const wfList = _orderBy(platform.getStartedWorkflows(), (wf) =>\n        new Date(wf.startedAt).getTime()\n      );\n\n      const timelineItems = wfList.map((wf) => ({\n        id: wf.id,\n        group: wf.id,\n        title: wf.id,\n        content: wf.id,\n        start: new Date(wf.startedAt),\n        end:\n          wf.status !== \"completed\" ? new Date() : new Date(wf.lastUpdatedAt),\n        type: \"background\",\n        selectable: false,\n        style: `border-color: black; background-color: ${wf.pipelineId}; opacity: 0.8; color: white;`\n      }));\n\n      timelineItems.push(\n        ...wfList.map((wf) => ({\n          id: `${wf.id}-created`,\n          group: wf.id,\n          title: wf.id,\n          start: new Date(wf.createdAt),\n          type: \"point\",\n          selectable: false,\n          className: `timeline-point-${wf.pipelineId}`\n        }))\n      );\n\n      timelineItems.push(\n        ...wfList.reduce((acc, wf) => {\n          acc.push(\n            ...wf.tasks\n              .filter((t) => t.startedAt)\n              .map((t) => ({\n                id: `task-${t.id}`,\n                group: wf.id,\n                title: `${t.id}`,\n                // content: `${t.id}`,\n                start: new Date(t.startedAt),\n                end:\n                  t.status !== \"completed\"\n                    ? new Date()\n                    : new Date(t.lastUpdatedAt),\n                type: \"range\",\n                selectable: false,\n                style: `border-color: white; background: none; color: white;`\n              }))\n          );\n          return acc;\n        }, [])\n      );\n\n      const timelineGroups = new DataSet(\n        wfList.map((wf, index) => ({\n          id: wf.id,\n          index,\n          content: \"\"\n        }))\n      );\n\n      timeline.setData({\n        groups: timelineGroups,\n        items: timelineItems\n      });\n    }\n  };\n\n  const changeSpeed = (event) => {\n    setSpeed(event.target.value);\n    delayMock.setSpeed(1 * event.target.value || 1);\n  };\n\n  const changeNumOfOrchestrators = (event) => {\n    platform.setNumOfOrchestrators(1 * event.target.value || 1);\n    setNumOfOrchestrators(platform.orchestrators.length);\n  };\n\n  const changeWorkflowsPerOrchestrator = (event) => {\n    setWorkflowsPerOrchestrator(event.target.value);\n    platform.setMaxWorkflowsPerOrchestrator(1 * event.target.value || 1);\n  };\n\n  const changeQueueSize = (event) => {\n    setQueueSize(event.target.value);\n    platform.enqueuer.setQueueMaxLength(1 * event.target.value || 1);\n  };\n\n  const changeWorkflowsToAdd = (event) => {\n    setWorkflowsToAdd(event.target.value);\n  };\n\n  const addWorkflows = (pipelineIds) => {\n    const getPipelineIdToSteps = () => ({\n      red: [\n        { type: \"ecs\", duration: 1000 * _random(1, 8), taskScript: \"ts1\" },\n        { type: \"windows\", duration: 5000 * _random(1, 5), taskScript: \"ts2\" }\n      ],\n      blue: [\n        { type: \"ecs\", duration: 1000 * _random(1, 5), taskScript: \"ts4\" }\n      ],\n      black: [\n        { type: \"ecs\", duration: 1000 * _random(100, 200), taskScript: \"ts5\" }\n      ]\n    });\n    platform.addWorkflows(\n      _times(workflowsToAdd, (i) => {\n        const pipelineId = pipelineIds[_random(0, pipelineIds.length - 1)];\n        return {\n          orgSlug: \"st-org\",\n          pipelineId: pipelineId,\n          protocol: {\n            id: \"someid\",\n            steps: getPipelineIdToSteps()[pipelineId]\n          }\n        };\n      })\n    );\n  };\n  const containerOSIcon = (c) => (\n    <>\n      {c.type === \"windows\" && (\n        <Icon\n          name=\"windows\"\n          className=\"pull-right\"\n          color={c.pipelineId}\n          disabled\n        />\n      )}\n      {c.type === \"ecs\" && (\n        <Icon\n          name=\"linux\"\n          className=\"pull-right\"\n          color={c.pipelineId}\n          disabled\n        />\n      )}\n    </>\n  );\n\n  useEffect(() => {\n    const syncInterval = setInterval(syncWithPlatform, 1000);\n    syncWithPlatform();\n    return () => {\n      clearInterval(syncInterval);\n      if (timeline) {\n        timeline.destroy();\n        timeline = null;\n      }\n    };\n  }, []);\n\n  return (\n    <div style={{ padding: \"14px 62px\" }}>\n      <style>{`\n       .timeline-point-blue { border-color: blue; }\n       .timeline-point-red { border-color: red; }\n       .timeline-point-black { border-color: black; }\n      `}</style>\n      <h3>\n        {newVersion ? \"New\" : \"Old\"} architecture simulation (\n        {newVersion ? (\n          <a href=\"./?old=1\" target=\"_self\">\n            switch to old\n          </a>\n        ) : (\n          <a href=\"./\">switch to new</a>\n        )}\n        )\n      </h3>\n      <div>\n        <Button\n          disabled={running}\n          loading={running}\n          onClick={() => startSimulation()}\n        >\n          RUN\n        </Button>\n        &nbsp;\n        <Button disabled={!running} onClick={() => stopSimulation()}>\n          STOP\n        </Button>\n        <Input\n          type=\"number\"\n          size=\"mini\"\n          label=\"speed\"\n          min=\"1\"\n          max=\"100\"\n          step=\"1\"\n          value={speed}\n          onChange={changeSpeed}\n          style={{ marginLeft: \"30px\" }}\n        />\n        <Input\n          type=\"number\"\n          size=\"mini\"\n          label=\"orchestrators\"\n          min=\"1\"\n          max=\"8\"\n          step=\"1\"\n          value={numOfOrchestrators}\n          onChange={changeNumOfOrchestrators}\n          style={{ marginLeft: \"4px\" }}\n        />\n        <Input\n          type=\"number\"\n          size=\"mini\"\n          label=\"workflows per orchestrator\"\n          min=\"1\"\n          max=\"100\"\n          step=\"1\"\n          value={workflowsPerOrchestrator}\n          onChange={changeWorkflowsPerOrchestrator}\n          style={{ marginLeft: \"4px\" }}\n        />\n        {!newVersion && (\n          <Input\n            type=\"number\"\n            size=\"mini\"\n            label=\"queue size\"\n            min=\"5\"\n            max=\"1000\"\n            step=\"5\"\n            value={queueSize}\n            onChange={changeQueueSize}\n            style={{ marginLeft: \"4px\" }}\n          />\n        )}\n        <Button\n          className=\"pull-right\"\n          style={{ marginLeft: \"14px\" }}\n          onClick={() => addWorkflows([\"blue\", \"red\", \"black\"])}\n        >\n          +mix\n        </Button>\n        <Button\n          className=\"pull-right\"\n          color=\"blue\"\n          onClick={() => addWorkflows([\"blue\"])}\n        >\n          +\n        </Button>\n        <Button\n          className=\"pull-right\"\n          color=\"red\"\n          onClick={() => addWorkflows([\"red\"])}\n        >\n          +\n        </Button>\n        <Button\n          className=\"pull-right\"\n          color=\"black\"\n          onClick={() => addWorkflows([\"black\"])}\n        >\n          +\n        </Button>\n        <Input\n          type=\"number\"\n          label=\"to create\"\n          min=\"1\"\n          max=\"100\"\n          step=\"1\"\n          value={workflowsToAdd}\n          onChange={changeWorkflowsToAdd}\n          className=\"pull-right\"\n          style={{ marginRight: \"8px\" }}\n        />\n      </div>\n      <div style={{ marginTop: \"10px\" }}>\n        {platformState && (\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHeaderCell width=\"1\">\n                  Pending [\n                  {(platformState.workflowsByStatus.pending || []).length}]\n                </TableHeaderCell>\n                {!newVersion && (\n                  <TableHeaderCell width=\"1\">Queue</TableHeaderCell>\n                )}\n                {platformState.orchestrators.map((o, i) => (\n                  <TableHeaderCell width=\"2\" key={o.id}>\n                    Orch #{i + 1} [{o.workflows.length}]\n                  </TableHeaderCell>\n                ))}\n                <TableHeaderCell width=\"2\">\n                  Containers [{platformState.containers.length}]\n                </TableHeaderCell>\n                <TableHeaderCell width=\"2\">Stats</TableHeaderCell>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              <TableRow>\n                <TableCell verticalAlign=\"top\">\n                  {(platformState.workflowsByStatus.pending || []).map((wf) => (\n                    <div key={wf.id} style={{ margin: \"2px\" }}>\n                      <Label size=\"tiny\" color={wf.pipelineId}>\n                        {wf.id}\n                      </Label>\n                    </div>\n                  ))}\n                </TableCell>\n                {!newVersion && (\n                  <TableCell verticalAlign=\"top\">\n                    {(platformState.execQueue || []).map((wf) => (\n                      <div key={wf.id} style={{ margin: \"2px\" }}>\n                        <Label size=\"tiny\" color={wf.pipelineId}>\n                          {wf.id}\n                        </Label>\n                      </div>\n                    ))}\n                  </TableCell>\n                )}\n                {platformState.orchestrators.map((o) => (\n                  <TableCell verticalAlign=\"top\" key={o.id}>\n                    {o.workflows.map((wf) => (\n                      <div key={wf.id}>\n                        <Segment.Group horizontal size=\"tiny\">\n                          {wf.tasks.map((t) => (\n                            <Segment compact color={wf.pipelineId} key={t.id}>\n                              {wf.id}-{t.id}\n                              {t.status === \"pending\" && (\n                                <Icon\n                                  name=\"hourglass\"\n                                  className=\"pull-right\"\n                                  color={wf.pipelineId}\n                                  disabled\n                                />\n                              )}\n                              {t.status === \"in-progress\" && (\n                                <Progress\n                                  percent={t.progress * 100}\n                                  size=\"tiny\"\n                                  style={{ margin: \"4px 0 0\" }}\n                                  color={wf.pipelineId}\n                                ></Progress>\n                              )}\n                            </Segment>\n                          ))}\n                        </Segment.Group>\n                      </div>\n                    ))}\n                  </TableCell>\n                ))}\n                <TableCell verticalAlign=\"top\">\n                  {(platformState.containers || []).map((c) =>\n                    c.status === \"creating\" ? (\n                      <Segment key={c.id} color={c.pipelineId}>\n                        Creating {c.type}...\n                        {containerOSIcon(c)}\n                      </Segment>\n                    ) : c.runningTask ? (\n                      <Segment color={c.pipelineId} key={c.id}>\n                        {c.runningTask.workflow.id}-{c.runningTask.id} [\n                        {c.reuseCount}]{containerOSIcon(c)}\n                        <Progress\n                          percent={c.runningTask.progress * 100}\n                          size=\"tiny\"\n                          style={{ margin: \"4px 0 0\" }}\n                          color={c.pipelineId}\n                        ></Progress>\n                      </Segment>\n                    ) : (\n                      <Segment color={c.pipelineId} key={c.id}>\n                        Idling [{c.reuseCount}]{containerOSIcon(c)}\n                      </Segment>\n                    )\n                  )}\n                </TableCell>\n                <TableCell verticalAlign=\"top\">\n                  {[\"black\", \"red\", \"blue\"].map((pipelineId) => (\n                    <Segment color={pipelineId} key={pipelineId}>\n                      <pre style={{ color: pipelineId }}>\n                        {JSON.stringify(stats[pipelineId], null, 2)}\n                      </pre>\n                    </Segment>\n                  ))}\n                </TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        )}\n      </div>\n      <div style={{ marginTop: \"10px\" }}>\n        <Checkbox\n          toggle\n          label={\n            timelineContainersMode\n              ? \"Containers timeline\"\n              : \"Workflows timeline\"\n          }\n          onChange={() => {\n            timelineContainersMode = 1 - timelineContainersMode;\n            syncWithPlatform();\n          }}\n          value={timelineContainersMode}\n        />\n      </div>\n      <div ref={timelineRef} style={{ marginTop: \"10px\" }} />\n    </div>\n  );\n};\n\nPipelinesSimulation.propTypes = {};\n\nexport default PipelinesSimulation;\n","import * as dbMock from \"./db-mock.js\";\nimport { getQueueSize, addToQueue } from \"./sqs-mock.js\";\nimport { delay } from \"./delay-mock.js\";\n\nexport default class Enqueuer {\n  execQueueMaxLength = 50;\n\n  running = false;\n\n  async run() {\n    this.running = true;\n    console.log(\"Enqueuer started\");\n    while (this.running) {\n      const messagesToPush =\n        this.execQueueMaxLength - getQueueSize(\"enqueuer2Orchestrator\");\n      if (messagesToPush > 0) {\n        const messages = dbMock.WorkflowModel.getNForEnqueuer(messagesToPush);\n        addToQueue(\"enqueuer2Orchestrator\", messages.reverse());\n      }\n      await delay(1000);\n    }\n    console.log(\"Enqueuer stopped\");\n  }\n\n  stop() {\n    this.running = false;\n  }\n\n  setQueueMaxLength(max) {\n    this.execQueueMaxLength = max;\n  }\n}\n","import _mapValues from \"lodash/mapValues\";\nimport _minBy from \"lodash/minBy\";\nimport _maxBy from \"lodash/maxBy\";\nimport _countBy from \"lodash/countBy\";\nimport _groupBy from \"lodash/groupBy\";\nimport Checktainer from \"./checktainer.js\";\nimport Orchestrator from \"./orchestrator.js\";\nimport * as dbMock from \"./db-mock.js\";\nimport * as sqsMock from \"./sqs-mock.js\";\nimport Enqueuer from \"./enqueuer.js\";\nimport { delay } from \"./delay-mock.js\";\nimport { getQueue } from \"./sqs-mock.js\";\n\nexport default class PlatformMock {\n  running = false;\n\n  orchestrators = [new Orchestrator(), new Orchestrator()];\n  checktainer = new Checktainer();\n  enqueuer = new Enqueuer();\n\n  constructor() {}\n\n  addWorkflows(list) {\n    dbMock.workflows.push(...list.map((d) => new dbMock.WorkflowModel(d)));\n  }\n\n  setNumOfOrchestrators(num) {\n    if (this.orchestrators.length < num) {\n      for (let i = this.orchestrators.length; i < num; i++) {\n        const o = new Orchestrator();\n        this.orchestrators.push(o);\n        if (this.running) {\n          o.run();\n        }\n      }\n    } else {\n      for (let i = this.orchestrators.length; i > num; i--) {\n        this.orchestrators.pop().stop();\n      }\n    }\n  }\n\n  setMaxWorkflowsPerOrchestrator(max) {\n    Orchestrator.runningWorkflowsMax = max;\n  }\n\n  async run() {\n    for (const orchestrator of this.orchestrators) {\n      orchestrator.run();\n    }\n    this.checktainer.run();\n    this.enqueuer.run();\n\n    this.running = true;\n    console.log(\"Platform started\");\n\n    while (this.running) {\n      await delay(1000);\n    }\n\n    for (const orchestrator of this.orchestrators) {\n      orchestrator.stop();\n    }\n    this.checktainer.stop();\n    this.enqueuer.stop();\n\n    console.log(\"Platform stopped\");\n  }\n\n  stop() {\n    this.running = false;\n  }\n\n  getStats(pipelineId) {\n    const pipelineWorkflows = dbMock.workflows.filter(\n      (wf) => wf.pipelineId === pipelineId\n    );\n    const pipelineTasks = dbMock.tasks.filter(\n      (t) => t.workflow.pipelineId === pipelineId\n    );\n    const pipelineContainers = dbMock.containers.filter(\n      (c) => c.pipelineId === pipelineId\n    );\n\n    const durations = pipelineWorkflows\n      .filter((wf) => wf.status === \"completed\")\n      .map((wf) => ({\n        duration:\n          new Date(wf.lastUpdatedAt).getTime() -\n          new Date(wf.startedAt).getTime(),\n        waiting:\n          new Date(wf.startedAt).getTime() - new Date(wf.createdAt).getTime()\n      }));\n\n    return {\n      workflows: _countBy(pipelineWorkflows, \"status\"),\n      tasks: _countBy(pipelineTasks, \"status\"),\n      containers: _countBy(pipelineContainers, \"status\"),\n      idlingContainers: pipelineContainers.filter(\n        (c) => c.status === \"running\" && !c.runningTask\n      ).length,\n      inQueue: sqsMock\n        .getQueue(\"enqueuer2Orchestrator\")\n        .filter((wf) => wf.pipelineId === pipelineId).length,\n      times: durations.length\n        ? {\n            durationMin: _minBy(durations, \"duration\").duration / 1000,\n            durationMax: _maxBy(durations, \"duration\").duration / 1000,\n            waitingMin: _minBy(durations, \"waiting\").waiting / 1000,\n            waitingMax: _maxBy(durations, \"waiting\").waiting / 1000\n          }\n        : {}\n    };\n  }\n\n  get state() {\n    return {\n      workflowsByStatus: _groupBy(dbMock.workflows, \"status\"),\n      orchestrators: this.orchestrators.map((o) => ({\n        id: o.id,\n        workflows: dbMock.workflows.filter(\n          (wf) =>\n            wf.orchestratorId === o.id &&\n            [\"pending\", \"queued\", \"in-progress\"].includes(wf.status)\n        )\n      })),\n      execQueue: sqsMock.getQueue(\"enqueuer2Orchestrator\"),\n      containers: dbMock.containers.filter((c) =>\n        [\"creating\", \"running\"].includes(c.status)\n      )\n    };\n  }\n\n  getStartedWorkflows() {\n    return dbMock.workflows.filter((wf) => wf.startedAt);\n  }\n\n  getStartedTasks() {\n    return dbMock.tasks.filter((t) => t.startedAt && t.container);\n  }\n\n  getContainers() {\n    return dbMock.containers;\n  }\n}\n","import _groupBy from \"lodash/groupBy\";\nimport _orderBy from \"lodash/orderBy\";\nimport { delay } from \"./delay-mock.js\";\nimport * as dbMock from \"./db-mock.js\";\nimport Orchestrator from \"./orchestrator.js\";\n\nexport default class Scheduler {\n  running = false;\n\n  maxOrchestrators = 8;\n\n  /**\n   * @type {PlatformMockNew}\n   */\n  platform = null;\n\n  noScaleUpCounter = 0;\n\n  constructor(platform) {\n    this.platform = platform;\n  }\n\n  getMaxWorkflowsPerPipeline(activePipelinesCount = 1, maxCapacity) {\n    return Math.ceil(maxCapacity / activePipelinesCount); // limits?\n  }\n\n  async run() {\n    this.running = true;\n    console.log(\"Scheduler started\");\n\n    while (this.running) {\n      const currentMaxCapacity =\n        Orchestrator.runningWorkflowsMax * this.platform.orchestrators.length;\n\n      const pendingAndRunning = dbMock.workflows.filter((wf) =>\n        [\"pending\", \"in-progress\"].includes(wf.status)\n      );\n\n      const wfGroups = Object.values(_groupBy(pendingAndRunning, \"pipelineId\"));\n\n      if (wfGroups.length) {\n        const maxWorkflowsPerPipeline = this.getMaxWorkflowsPerPipeline(\n          wfGroups.length,\n          currentMaxCapacity\n        );\n\n        let exitLoop = false;\n        while (!exitLoop) {\n          exitLoop = true;\n          for (const pipelineWorkflows of wfGroups) {\n            const allocatedForPipelineCount = pipelineWorkflows.filter(\n              (wf) => wf.orchestratorId\n            ).length;\n            if (allocatedForPipelineCount < maxWorkflowsPerPipeline) {\n              const firstNotAllocatedWF = pipelineWorkflows.find(\n                (wf) => !wf.orchestratorId\n              );\n              if (!firstNotAllocatedWF) continue;\n              const sortedOrchestrators = _orderBy(\n                this.platform.orchestrators,\n                (o) =>\n                  dbMock.workflows.filter(\n                    (wf) =>\n                      [\"pending\", \"in-progress\"].includes(wf.status) &&\n                      wf.orchestratorId === o.id\n                  ).length\n              );\n              for (const o of sortedOrchestrators) {\n                const allocatedCount = dbMock.workflows.filter(\n                  (wf) =>\n                    [\"pending\", \"in-progress\"].includes(wf.status) &&\n                    wf.orchestratorId === o.id\n                ).length;\n                if (allocatedCount < Orchestrator.runningWorkflowsMax) {\n                  firstNotAllocatedWF.orchestratorId = o.id;\n                  exitLoop = false;\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      const allocatedCount = dbMock.workflows.filter(\n        (wf) =>\n          [\"pending\", \"in-progress\"].includes(wf.status) && wf.orchestratorId\n      ).length;\n      const notAllocatedWorkflows = dbMock.workflows.filter(\n        (wf) => !wf.orchestratorId\n      );\n      const notAllocatedCount = notAllocatedWorkflows.length;\n\n      // TODO: rethink scaling...\n      if (\n        notAllocatedCount > 0 &&\n        allocatedCount + notAllocatedCount > currentMaxCapacity &&\n        allocatedCount > 0.8 * currentMaxCapacity\n      ) {\n        const [firstWaitingWorkflow] = notAllocatedWorkflows;\n        const ageOfFirstWaitingWorkflow =\n          Date.now() - new Date(firstWaitingWorkflow.createdAt).getTime();\n        if (\n          ageOfFirstWaitingWorkflow > 30000 &&\n          this.platform.orchestrators.length < this.maxOrchestrators &&\n          this.noScaleUpCounter === 0\n        ) {\n          // this.platform.incNumOfOrchestrators();\n          // this.noScaleUpCounter = 10;\n        }\n      }\n\n      if (this.noScaleUpCounter > 0) this.noScaleUpCounter--;\n\n      await delay(1000);\n    }\n    console.log(\"Scheduler stopped\");\n  }\n\n  stop() {\n    this.running = false;\n  }\n}\n","import _mapValues from \"lodash/mapValues\";\nimport _remove from \"lodash/remove\";\nimport _minBy from \"lodash/minBy\";\nimport _maxBy from \"lodash/maxBy\";\nimport _countBy from \"lodash/countBy\";\nimport _groupBy from \"lodash/groupBy\";\nimport Checktainer from \"./checktainer.js\";\nimport Orchestrator from \"./orchestrator.js\";\nimport * as dbMock from \"./db-mock.js\";\nimport Scheduler from \"./scheduler.js\";\nimport { delay } from \"./delay-mock.js\";\n\nexport default class PlatformMockNew {\n  running = false;\n\n  orchestrators = [new Orchestrator(true, true), new Orchestrator(true, true)];\n\n  checktainer = new Checktainer();\n  /**\n   * @type {Scheduler}\n   */\n  scheduler = null;\n\n  constructor() {\n    this.scheduler = new Scheduler(this);\n  }\n\n  addWorkflows(list) {\n    dbMock.workflows.push(...list.map((d) => new dbMock.WorkflowModel(d)));\n  }\n\n  incNumOfOrchestrators() {\n    this.setNumOfOrchestrators(this.orchestrators.length + 1);\n  }\n\n  setNumOfOrchestrators(num) {\n    if (this.orchestrators.length < num) {\n      for (let i = this.orchestrators.length; i < num; i++) {\n        const o = new Orchestrator(true);\n        this.orchestrators.push(o);\n        if (this.running) {\n          o.run();\n        }\n      }\n    } else {\n      for (let i = this.orchestrators.length; i > num; i--) {\n        this.orchestrators.pop().stop();\n      }\n    }\n  }\n\n  setMaxWorkflowsPerOrchestrator(max) {\n    Orchestrator.runningWorkflowsMax = max;\n  }\n\n  async run() {\n    for (const orchestrator of this.orchestrators) {\n      orchestrator.run();\n    }\n    this.checktainer.run();\n    this.scheduler.run();\n\n    this.running = true;\n    console.log(\"Platform started\");\n\n    while (this.running) {\n      _remove(this.orchestrators, (o) => {\n        if (\n          !o.reserved &&\n          o.idlingDuration > 20000 &&\n          !o.runningWorkflows.size\n        ) {\n          o.stop();\n          return true;\n        }\n        return false;\n      });\n      await delay(1000);\n    }\n\n    for (const o of this.orchestrators) {\n      o.stop();\n    }\n    this.checktainer.stop();\n    this.scheduler.stop();\n\n    console.log(\"Platform stopped\");\n  }\n\n  stop() {\n    this.running = false;\n  }\n\n  getStats(pipelineId) {\n    const pipelineWorkflows = dbMock.workflows.filter(\n      (wf) => wf.pipelineId === pipelineId\n    );\n    const pipelineTasks = dbMock.tasks.filter(\n      (t) => t.workflow.pipelineId === pipelineId\n    );\n    const pipelineContainers = dbMock.containers.filter(\n      (c) => c.pipelineId === pipelineId\n    );\n\n    const durations = pipelineWorkflows\n      .filter((wf) => wf.status === \"completed\")\n      .map((wf) => ({\n        duration:\n          new Date(wf.lastUpdatedAt).getTime() -\n          new Date(wf.startedAt).getTime(),\n        waiting:\n          new Date(wf.startedAt).getTime() - new Date(wf.createdAt).getTime()\n      }));\n\n    return {\n      workflows: _countBy(pipelineWorkflows, \"status\"),\n      tasks: _countBy(pipelineTasks, \"status\"),\n      containers: _countBy(pipelineContainers, \"status\"),\n      idlingContainers: pipelineContainers.filter(\n        (c) => c.status === \"running\" && !c.runningTask\n      ).length,\n      times: durations.length\n        ? {\n            durationMin: _minBy(durations, \"duration\").duration / 1000,\n            durationMax: _maxBy(durations, \"duration\").duration / 1000,\n            waitingMin: _minBy(durations, \"waiting\").waiting / 1000,\n            waitingMax: _maxBy(durations, \"waiting\").waiting / 1000\n          }\n        : {}\n    };\n  }\n\n  get state() {\n    return {\n      workflowsByStatus: _groupBy(dbMock.workflows, \"status\"),\n      orchestrators: this.orchestrators.map((o) => ({\n        id: o.id,\n        workflows: dbMock.workflows.filter(\n          (wf) =>\n            wf.orchestratorId === o.id &&\n            [\"pending\", \"queued\", \"in-progress\"].includes(wf.status)\n        )\n      })),\n      containers: dbMock.containers.filter((c) =>\n        [\"creating\", \"running\"].includes(c.status)\n      )\n    };\n  }\n\n  getStartedWorkflows() {\n    return dbMock.workflows.filter((wf) => wf.startedAt);\n  }\n\n  getStartedTasks() {\n    return dbMock.tasks.filter((t) => t.startedAt && t.container);\n  }\n\n  getContainers() {\n    return dbMock.containers;\n  }\n}\n","import { createRoot } from \"react-dom/client\";\nimport { HashRouter, Routes, Route } from \"react-router-dom\";\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"./styles.css\";\n\nimport App from \"./App\";\nimport PipelinesSimulation from \"./simulation\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <HashRouter>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<PipelinesSimulation />} />\n      </Route>\n    </Routes>\n  </HashRouter>\n);\n"],"sourceRoot":""}